diff --git a/api/cloud/oc_cloud_resource.c b/api/cloud/oc_cloud_resource.c
index c6b36d7..09b14c5 100644
--- a/api/cloud/oc_cloud_resource.c
+++ b/api/cloud/oc_cloud_resource.c
@@ -144,7 +144,7 @@ post_cloud(oc_request_t *request, oc_interface_mask_t interface,
   }
   OC_DBG("POST request received");
   (void)interface;
-
+/*
   switch (ctx->store.cps) {
   case OC_CPS_UNINITIALIZED:
   case OC_CPS_READYTOREGISTER:
@@ -155,7 +155,7 @@ post_cloud(oc_request_t *request, oc_interface_mask_t interface,
     return;
   }
   }
-
+*/
   char *cps;
   size_t cps_len = 0;
   if (oc_rep_get_string(request->request_payload, "cps", &cps, &cps_len)) {
diff --git a/apps/cloud_server.c b/apps/cloud_server.c
index 6edd644..ceaff87 100644
--- a/apps/cloud_server.c
+++ b/apps/cloud_server.c
@@ -19,6 +19,7 @@
 
 #include "oc_api.h"
 #include "oc_pki.h"
+#include "oc_core_res.h"
 #include <signal.h>
 #include <inttypes.h>
 
@@ -194,6 +195,7 @@ cloud_status_handler(oc_cloud_context_t *ctx, oc_cloud_status_t status,
 static int
 app_init(void)
 {
+  oc_set_con_res_announced(true);
   int ret = oc_init_platform(manufacturer, NULL, NULL);
   ret |= oc_add_device("/oic/d", device_rt, device_name, spec_version,
                        data_model_version, NULL, NULL);
@@ -294,6 +296,10 @@ register_resources(void)
   oc_resource_set_request_handler(res2, OC_POST, post_handler, &light2);
   oc_cloud_add_resource(res2);
   oc_add_resource(res2);
+
+  // publish con resource
+  oc_resource_t *con_res = oc_core_get_resource_by_index(OCF_CON, 0);
+  oc_cloud_add_resource(con_res);
 }
 
 #if defined(OC_SECURITY) && defined(OC_PKI)
@@ -360,6 +366,65 @@ factory_presets_cb(size_t device, void *data)
 #endif /* OC_SECURITY && OC_PKI */
 }
 
+void
+factory_presets_cb_new(size_t device, void *data)
+{
+  oc_device_info_t* dev = oc_core_get_device_info(device);
+  oc_free_string(&dev->name);
+  oc_new_string(&dev->name, device_name, strlen(device_name));
+  (void)data;
+#if defined(OC_SECURITY) && defined(OC_PKI)
+  PRINT("factory_presets_cb: %d\n", (int) device);
+
+	const char* cert = "-----BEGIN CERTIFICATE-----\n"
+"MIIB9zCCAZygAwIBAgIRAOwIWPAt19w7DswoszkVIEIwCgYIKoZIzj0EAwIwEzER\n"
+"MA8GA1UEChMIVGVzdCBPUkcwHhcNMTkwNTAyMjAwNjQ4WhcNMjkwMzEwMjAwNjQ4\n"
+"WjBHMREwDwYDVQQKEwhUZXN0IE9SRzEyMDAGA1UEAxMpdXVpZDpiNWEyYTQyZS1i\n"
+"Mjg1LTQyZjEtYTM2Yi0wMzRjOGZjOGVmZDUwWTATBgcqhkjOPQIBBggqhkjOPQMB\n"
+"BwNCAAQS4eiM0HNPROaiAknAOW08mpCKDQmpMUkywdcNKoJv1qnEedBhWne7Z0jq\n"
+"zSYQbyqyIVGujnI3K7C63NRbQOXQo4GcMIGZMA4GA1UdDwEB/wQEAwIDiDAzBgNV\n"
+"HSUELDAqBggrBgEFBQcDAQYIKwYBBQUHAwIGCCsGAQUFBwMBBgorBgEEAYLefAEG\n"
+"MAwGA1UdEwEB/wQCMAAwRAYDVR0RBD0wO4IJbG9jYWxob3N0hwQAAAAAhwR/AAAB\n"
+"hxAAAAAAAAAAAAAAAAAAAAAAhxAAAAAAAAAAAAAAAAAAAAABMAoGCCqGSM49BAMC\n"
+"A0kAMEYCIQDuhl6zj6gl2YZbBzh7Th0uu5izdISuU/ESG+vHrEp7xwIhANCA7tSt\n"
+"aBlce+W76mTIhwMFXQfyF3awWIGjOcfTV8pU\n"
+"-----END CERTIFICATE-----\n";
+
+	const char* key = "-----BEGIN EC PRIVATE KEY-----\n"
+"MHcCAQEEIMPeADszZajrkEy4YvACwcbR0pSdlKG+m8ALJ6lj/ykdoAoGCCqGSM49\n"
+"AwEHoUQDQgAEEuHojNBzT0TmogJJwDltPJqQig0JqTFJMsHXDSqCb9apxHnQYVp3\n"
+"u2dI6s0mEG8qsiFRro5yNyuwutzUW0Dl0A==\n"
+"-----END EC PRIVATE KEY-----\n";
+
+	const char* root_ca = "-----BEGIN CERTIFICATE-----\n"
+"MIIBaTCCAQ+gAwIBAgIQR33gIB75I7Vi/QnMnmiWvzAKBggqhkjOPQQDAjATMREw\n"
+"DwYDVQQKEwhUZXN0IE9SRzAeFw0xOTA1MDIyMDA1MTVaFw0yOTAzMTAyMDA1MTVa\n"
+"MBMxETAPBgNVBAoTCFRlc3QgT1JHMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\n"
+"xbwMaS8jcuibSYJkCmuVHfeV3xfYVyUq8Iroz7YlXaTayspW3K4hVdwIsy/5U+3U\n"
+"vM/vdK5wn2+NrWy45vFAJqNFMEMwDgYDVR0PAQH/BAQDAgEGMBMGA1UdJQQMMAoG\n"
+"CCsGAQUFBwMBMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0RBAQwAoIAMAoGCCqGSM49\n"
+"BAMCA0gAMEUCIBWkxuHKgLSp6OXDJoztPP7/P5VBZiwLbfjTCVRxBvwWAiEAnzNu\n"
+"6gKPwtKmY0pBxwCo3NNmzNpA6KrEOXE56PkiQYQ=\n"
+"-----END CERTIFICATE-----\n";
+
+  int ee_credid = oc_pki_add_mfg_cert(0, (const unsigned char *)cert, strlen(cert),
+                                      (const unsigned char *)key, strlen(key));
+  if (ee_credid < 0) {
+    PRINT("ERROR installing manufacturer EE cert\n");
+    return;
+  }
+
+  int rootca_credid =
+    oc_pki_add_mfg_trust_anchor(0, (const unsigned char *)root_ca, strlen(root_ca));
+  if (rootca_credid < 0) {
+    PRINT("ERROR installing root cert\n");
+    return;
+  }
+
+  oc_pki_set_security_profile(0, OC_SP_BLACK, OC_SP_BLACK, ee_credid);
+#endif /* OC_SECURITY && OC_PKI */
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -406,7 +471,7 @@ main(int argc, char *argv[])
 #ifdef OC_STORAGE
   oc_storage_config("./cloud_server_creds/");
 #endif /* OC_STORAGE */
-  oc_set_factory_presets_cb(factory_presets_cb, NULL);
+  oc_set_factory_presets_cb(factory_presets_cb_new, NULL);
 
   ret = oc_main_init(&handler);
   if (ret < 0)
